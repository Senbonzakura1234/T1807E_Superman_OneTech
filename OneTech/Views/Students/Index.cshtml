@using OneTech.Models
@model IEnumerable<OneTech.Models.Student>

@{
    ViewBag.Title = "Index";
}

<div class="row">
    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Advanced Search</h4>
                <p class="card-description d-sm-flex">
                    <span class="text-muted text-small my-auto">Search Student with filter</span>
                    <br class="d-sm-none" />
   
                    <a class="btn btn-sm btn-light ml-auto mr-2 mt-2 mt-sm-0" id="clearFilterCustomer" href="@Url.Action("Index", "Students")">
                        Clear filter
                    </a>
                </p>
                @using (Html.BeginForm("Index", "Students", FormMethod.Get,
                    new { role = "search", id = "AdvanceSearchFormStudent" }))
                {
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group mb-lg-0">
                                <label for="advanceFullname">
                                    <span class="text-small">Fullname</span>
                                </label>
                                <input id="advanceFullname" value="@{if (ViewBag.advanceFullname != null) { @ViewBag.advanceFullname}}" name="advanceFullname" type="text" class="form-control form-control-sm" />
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group mb-lg-0">
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="datefilter">
                                    <span class="text-small">Date filter</span>
                                </label>
                                <input type="text" name="datefilter" id="datefilter" value="" class="form-control form-control-sm" />
                            </div>
                        </div>
                        <input type="hidden" value="@{if (ViewBag.advanceStart != null) { @ViewBag.advanceStart}}" name="start" id="startDate"/>
                        <input type="hidden" value="@{if (ViewBag.advanceEnd != null) { @ViewBag.advanceEnd}}" name="end" id="endDate"/>
                        <input type="hidden" name="similar" id="similarDate"/>
                    </div>
                    <div class="row">
                        <div class="col-12 mt-3 text-right">
                            <input type="submit" class="btn btn-primary btn-sm" value="Search" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body table-responsive">
                <h4 class="card-title">Student</h4>
                <p class="card-description d-sm-flex">
                    <span class="text-muted text-small my-auto">Click student name to see detail</span>
                    <br class="d-sm-none" />

                    <a class="btn btn-sm btn-primary ml-auto mr-2 mt-2 mt-sm-0" href="@Url.Action("Create", "Students")">
                        Create New <span class="mdi mdi-plus-circle"></span>
                    </a>
                </p>
                <table class="table" id="update-student">
                    <thead class="text-primary">
                        <tr>
                            <th>
                                #
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.FullName)
                            </th>
                            <th class="d-none d-sm-table-cell">
                                Class Name
                            </th>
                            <th class="d-none d-xl-table-cell">
                                @Html.DisplayNameFor(model => model.Birthday)
                            </th>
                            <th class="text-center d-none d-xl-table-cell">
                                @Html.DisplayNameFor(model => model.PenaltyLevel)
                            </th>
                            <th class="text-center d-none d-lg-table-cell">
                                Edit
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {

                            <tr>
                                <td>
                                    <b class="text-small">@Html.DisplayFor(modelItem => item.Id)</b>
                                </td>

                                <td>
                                    <a class="badge w-100 @(item.StudentStatus == Student.StudentStatusEnum.Active ? "badge-gradient-primary" : "badge-gradient-secondary")
                                            w-100" href="@Url.Action("Details", "Students", new {id = item.Id})">
                                        @Html.DisplayFor(modelItem => item.FullName)
                                    </a>
                                </td>
                                <td class="d-none d-sm-table-cell text-info">
                                    <a href="@Url.Action("Details", "Classes", new {id = item.ClassId})" class="badge w-100 badge-gradient-success">
                                        @Html.DisplayFor(modelItem => item.Class.Name)
                                    </a>
                                </td>
                                <td class="d-none d-xl-table-cell ">
                                    @* ReSharper disable once Html.IdNotResolved *@
                                    <a href="#/" class="birth-day badge w-100 badge-gradient-info">@Html.DisplayFor(modelItem => item.Birthday)</a>
                                </td>
                                <td class="text-center d-none d-xl-table-cell">
                                    @Html.DisplayFor(modelItem => item.PenaltyLevel)
                                </td>
                                <td class="text-center d-none d-lg-table-cell">
                                    <a class="badge badge-warning" href="@Url.Action("Edit", "Students", new {id = item.Id})">
                                        <span class="mdi mdi-pencil-box-outline"></span>
                                    </a>
                                </td>
                            </tr>
                            @*<a class="btn btn-link" href="@Url.Action("Edit", "Students", new {id = item.Id})">
                                    <span class="mdi mdi-pencil-box-outline"></span>
                                </a>
                                <a class="btn btn-link" href="@Url.Action("Details", "Students", new {id = item.Id})">
                                    <span class="mdi mdi-file-document"></span>
                                </a>
                                <a class="btn btn-link" href="@Url.Action("Delete", "Students", new {id = item.Id})">
                                    <span class="mdi mdi-trash-can-outline"></span>
                                </a>*@
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>
@section scripts{
    <script type="text/javascript">
        $(function () {
            // init start time and end time;
            var startDate = new Date();
            var endDate = new Date();
            const startPara = $("#startDate").val();  
            const endPara = $("#endDate").val();
            function isEmptyOrSpaces(str){
// ReSharper disable once QualifiedExpressionMaybeNull
                return str === null || str.match(/^ *$/) !== null;
            }

            if (startPara.length !== 0 || !isEmptyOrSpaces(startPara)) {
                startDate = new Date(startPara);
            }
            if (endPara .length !== 0 || !isEmptyOrSpaces(endPara)) {
                endDate = new Date(endPara);
            }
            // ReSharper disable once PossiblyUnassignedProperty
            $('input[name="datefilter"]').daterangepicker({
                autoUpdateInput: true,
                startDate: startDate,
                endDate: endDate,
                locale: {
                    cancelLabel: 'Clear'
                }
            });


            $('input[name="datefilter"]').on('apply.daterangepicker', function (ev, picker) {
                const start = picker.startDate.format('YYYY-MM-DD');
                const end = picker.endDate.format('YYYY-MM-DD');
                console.log(start);
                console.log(end);
                $("#startDate").val(start);
                $("#endDate").val(end);
                $("#AdvanceSearchFormStudent").submit();
            });

// ReSharper disable UnusedParameter
            $('input[name="datefilter"]').on('cancel.daterangepicker', function (ev, picker) {
// ReSharper restore UnusedParameter
                $(this).val("");
                $("#endDate").val("");
                $("#startDate").val("");
                $("#AdvanceSearchFormStudent").submit();
            });
            $(".birth-day").click(function () {
                const date = $(this).text();
                console.log(date);
                $("#similarDate").val(date);
                $("#AdvanceSearchFormStudent").submit();
            });

        });
    </script>
}

