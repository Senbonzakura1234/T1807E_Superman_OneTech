@using OneTech.Models
@model IEnumerable<OneTech.Models.Student>
@{
    ViewBag.Title = "View";
    var i = 0;
}
<div class="row">
    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body table-responsive">
                <h4 class="card-title">Attendance</h4>
                <p class="card-description d-sm-flex">
                    <button class="btn btn-sm btn-primary ml-auto mr-2 mt-2 mt-sm-0 confirm-all-btn" disabled="disabled">
                        Update Attendance Info
                    </button>
                </p>
                <table class="table">
                    <thead class="text-primary">
                        <tr>
                            <th class="text-center d-none d-xl-table-cell">
                                #
                            </th>
                            <th class="text-center">
                                @Html.DisplayNameFor(model => model.FullName)
                            </th>
                            <th class="text-center">
                                @Html.DisplayNameFor(model => model.Id)
                            </th>
                            <th class="text-center">
                                @Html.DisplayNameFor(model => model.ClassId)
                            </th>
                            <th class="text-center d-none d-xl-table-cell">
                                @Html.DisplayNameFor(model => model.OwedPushUp)
                            </th>
                            <th class="text-center d-none d-xl-table-cell">
                                @Html.DisplayNameFor(model => model.OwedCash)
                            </th>
                            <th class="text-center d-none d-xl-table-cell">
                                @Html.DisplayNameFor(model => model.PenaltyLevel)
                            </th>
                            <th class="text-center d-none d-xl-table-cell">
                                Attendance Status
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            i++;
                            <tr id="studentId_@item.Id" class="transition">
                                <td class="text-center d-none d-xl-table-cell">
                                    <b class="text-small">@i</b>
                                </td>

                                <td class="text-center">
                                    <a class="badge w-100 @(item.StudentStatus == Student.StudentStatusEnum.Active ? "badge-gradient-primary" : "badge-gradient-secondary")
                                            w-100" href="@Url.Action("Details", "Students", new {id = item.Id})">
                                        @Html.DisplayFor(modelItem => item.FullName)
                                    </a>
                                </td>
                                <td class="text-center">
                                    SC @Html.DisplayFor(modelItem => item.Id)
                                </td>
                                <td class="text-center">
                                    @Html.DisplayFor(modelItem => item.Class.Name)
                                </td>
                                <td class="text-center d-none d-xl-table-cell">
                                    @Html.DisplayFor(modelItem => item.OwedPushUp)
                                </td>
                                <td class="text-center d-none d-xl-table-cell">
                                    @Html.DisplayFor(modelItem => item.OwedCash)
                                </td>
                                <td class="text-center d-none d-xl-table-cell">
                                    @Html.DisplayFor(modelItem => item.PenaltyLevel)
                                </td>
                                <td class="text-center">
                                    <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#exampleModal" data-whatever="@item.Id">
                                        Absent/Late
                                    </button>

                                    <button type="button" class="btn btn-primary btn-sm onTime" data="@item.Id">
                                        On time
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header border-0">
                <h4 class="modal-title" id="exampleModalLabel">Confirm</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <input type="hidden" name="studentId" id="studentId"/>
                    <input type="hidden" name="penaltyLevel" id="penaltyLevel" step="1" min="0" max="1000"/>
                    <div class="form-group">
                        <label for="attendanceStatus">Attendance Status</label>

                        <select class="form-control selectpicker search-option-select" id="attendanceStatus" name="attendanceStatus"
                                data-style="select-option-btn">
                            <option value="0">--------------</option>
                            <option value="1">Late</option>
                            <option value="2">Absent</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="penaltyType">Penalty Type</label>

                        <select class="form-control search-option-select selectpicker" name="penaltyType" id="penaltyType"
                                data-style="select-option-btn">
                            <option value="0">--------------</option>
                            <option value="1">Cash</option>
                            <option value="2">Push up</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="currentPenaltyLevel">After Confirm Penalty Level</label>
                        <input type="number" class="form-control" name="currentPenaltyLevel" id="currentPenaltyLevel"
                               step="1" min="0" max="1000" readonly="readonly"/>
                    </div>
                    <div class="form-group">
                        <label for="OwedCash">Owe Money</label>
                        <input type="number" class="form-control" name="OwedCash" id="OwedCash" readonly="readonly"/>
                    </div>
                    <div class="form-group">
                        <label for="OwedPushUp">Owe PushUp</label>
                        <input type="number" class="form-control" name="OwedPushUp" id="OwedPushUp" readonly="readonly"/>
                    </div>
                    <div class="form-group">
                        <label for="TotalCash">Total PushUp</label>
                        <input type="number" class="form-control" name="TotalCash" id="TotalCash" readonly="readonly"/>
                    </div>
                    <div class="form-group">
                        <label for="TotalPushUp">Total PushUp</label>
                        <input type="number" class="form-control" name="TotalPushUp" id="TotalPushUp" readonly="readonly"/>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-primary pay-btn" data-dismiss="modal" disabled="disabled">Pay now</button>
                <button type="button" class="btn btn-warning owe-btn" data-dismiss="modal" disabled="disabled">Next time</button>
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                @*@using (Html.BeginForm("", "", null))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => item.Id)
            <input type="submit" value="Delete" class="btn btn-danger" />
        }*@
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(function () {
            var dataLength = @ViewBag.Length;
            var listPenalty = (function() {
                // =============================
                // Private methods and propeties
                // =============================
                var list = [];

                // Constructor
                function Penalty(id, penaltyType, owed, onTime) {
                    this.id = id;
                    this.penaltyType = penaltyType;
                    this.owed = owed;
                    this.onTime = onTime;
                }


                // =============================
                // Public methods and propeties
                // =============================
                const obj = {};

                // Add to cart
                obj.addPenaltyToList = function(id, penaltyType, owed, onTime) {
                    var item;
                    for (item in list) {
                        if (list.hasOwnProperty(item)) {
                            if (list[item].id === id) {
                                list[item].count++;
                                return;
                            }
                        }
                    }
                    item = new Penalty(id, penaltyType, owed, onTime);
                    console.log(item);
                    list.push(item);
                };
                // Remove item from cart
                obj.removePenaltyFromList = function(id) {
                    for (let item in list) {
                        if (list.hasOwnProperty(item)) {
                            if (list[item].id === id) {
                                list[item].count--;
                                if (list[item].count === 0) {
                                    list.splice(item, 1);
                                }
                                break;
                            }
                        }
                    }
                };

                obj.listPenalty = function() {
                    const penaltyCopy = [];
                    var i;
                    for (i in list) {
                        if (list.hasOwnProperty(i)) {
                            const item = list[i];
                            const itemCopy = {};
                            let p;
                            for (p in item) {
                                if (item.hasOwnProperty(p)) {
                                    itemCopy[p] = item[p];

                                }
                            }
                            penaltyCopy.push(itemCopy);
                        }
                    }
                    return penaltyCopy;
                };
                return obj;
            })();


            $('#exampleModal').on('show.bs.modal',
                function(event) {
                    const button = $(event.relatedTarget); // Button that triggered the modal
                    const recipient = button.data('whatever'); // Extract info from data-* attributes
                    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
                    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
                    const modal = $(this);
                    $.ajax({
                        url: "/Classes/GetStudentInfo",
                        type: "GET",
                        data: {
                            id: recipient
                        },
                        success: function(res) {
                            if (res != null) {
                                console.log(res);
                                modal.find('.modal-title').text(`Attendance ${res.fullName}`);
                                modal.find('#OwedCash').val(res.owedCash);
                                modal.find('#OwedPushUp').val(res.owedPushUp);
                                modal.find('#studentId').val(res.id);
                                modal.find('#penaltyLevel').val(res.penaltyLevel);
                                modal.find('#currentPenaltyLevel').val(res.penaltyLevel);
                                modal.find('.pay-btn').prop('id', res.id);
                                modal.find('.owe-btn').prop('id', res.id);
                            }
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.status);
                            alert(thrownError);
                        }
                    });

                });
            $(`#penaltyType`).on(`change`,
                function () {
                    // ReSharper disable CoercedEqualsUsing

                    const valueSelected = this.value;
                    const penaltyTypeVal = $(`#attendanceStatus`).val();
                    if (valueSelected == 0 || penaltyTypeVal == 0) {
                        $(".owe-btn").attr("disabled", true);
                        $(".pay-btn").attr("disabled", true);

                    } else {
                        if (penaltyTypeVal == 1) {
                            $(".pay-btn").attr("disabled", false);
                            $(".owe-btn").attr("disabled", true);
                        } else {
                            $(".pay-btn").attr("disabled", true);
                            $(".owe-btn").attr("disabled", false);
                        }
                    }
                });
            $(`#attendanceStatus`).on(`change`,
                function() {
                    const valueSelected = this.value;
                    const penaltyTypeVal = $(`#penaltyType`).val();
                    const baseLevel = parseInt($('#penaltyLevel').val()) + 1;

                    if (valueSelected == 0 || penaltyTypeVal == 0) {
                        $('#currentPenaltyLevel').val(0);
                        $(".owe-btn").attr("disabled", true);
                        $(".pay-btn").attr("disabled", true);

                    } else {
                        $('#currentPenaltyLevel').val(baseLevel);
                        if (valueSelected == 1) {
                            $(".pay-btn").attr("disabled", false);
                            $(".owe-btn").attr("disabled", true);
                        } else {
                            $(".pay-btn").attr("disabled", true);
                            $(".owe-btn").attr("disabled", false);
                        }
                    }
                });
            $('.onTime').click(function() {
                const id = $(this).attr('data');
                $(`#studentId_${id}`).css('opacity', '0.1');
                listPenalty.removePenaltyFromList(id);
                listPenalty.addPenaltyToList(id, null, null, true);
                if (listPenalty.listPenalty().length == parseInt(dataLength)) {
                    $(".confirm-all-btn").attr("disabled", false);
                } else {
                    $(".confirm-all-btn").attr("disabled", true);
                }
            });
            $('.pay-btn').click(function() {
                const id = $(this).attr('id');
                $(`#studentId_${id}`).css('opacity', '0.1');
                console.log(id);
// ReSharper disable once CoercedEqualsUsing
                if ($('#attendanceStatus').val() == 0) {
                    listPenalty.removePenaltyFromList($('#studentId').val());
                } else {
                    listPenalty.removePenaltyFromList($('#studentId').val());
                    listPenalty.addPenaltyToList($('#studentId').val(), $('#penaltyType').val(), false, false);
                }
                
                if (listPenalty.listPenalty().length == parseInt(dataLength)) {
                    $(".confirm-all-btn").attr("disabled", false);
                } else {
                    $(".confirm-all-btn").attr("disabled", true);
                }
            });
            $('.owe-btn').click(function() {
                const id = $(this).attr('id');
                $(`#studentId_${id}`).css('opacity', '0.1');
                console.log(id);
// ReSharper disable once CoercedEqualsUsing
                if ($('#attendanceStatus').val() == 0) {
                    listPenalty.removePenaltyFromList($('#studentId').val());
                } else {
                    listPenalty.removePenaltyFromList($('#studentId').val());
                    listPenalty.addPenaltyToList($('#studentId').val(), $('#penaltyType').val(), true);
                }
                
                if (listPenalty.listPenalty().length == parseInt(dataLength)) {
                    $(".confirm-all-btn").attr("disabled", false);
                } else {
                    $(".confirm-all-btn").attr("disabled", true);
                }
            });
            $('.confirm-all-btn').click(function() {
                console.log(listPenalty.listPenalty());
                console.log(listPenalty.listPenalty().length);
                if (listPenalty.listPenalty().length == parseInt(dataLength)) {
                    $.ajax({
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        type: "POST",
                        url: "/Classes/AttendanceConfirm",
                        data: JSON.stringify({
                            'attendances': listPenalty.listPenalty(),
                            'classId': @ViewBag.ClassId
                        }),
                        success: function(res) {
                            console.log(res);
                            if (res.url != null) {
                                window.location.href = res.url;
                            }
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.status);
                            alert(thrownError);
                        }
                    });
                }
            });
        });
    </script>
}