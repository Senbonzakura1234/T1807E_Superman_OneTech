@model IEnumerable<OneTech.Models.Class>

@{
    ViewBag.Title = "View";
    var totalPage = ((int?)ViewBag.TotalPage).Value;
    var currentPage = ((int?)ViewBag.CurrentPage).Value;
    var limit = ((int?)ViewBag.Limit).Value;
    var currentPara = "&start=" + ViewBag.Start + "&end=" + ViewBag.End;
}


<div class="row">
    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h2>Index</h2>

                <p>
                    @Html.ActionLink("Create New", "Create")
                </p>
            </div>
        </div>
    </div>

    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Advanced Search</h4>
                <p class="card-description d-sm-flex">
                    <span class="text-muted text-small my-auto">Search Class with filter</span>
                    <br class="d-sm-none" />


                    <button class="btn btn-sm btn-light ml-auto mr-2 mt-2 mt-sm-0" id="clearFilterCustomer">
                        Clear filter
                    </button>
                </p>
                @using (Html.BeginForm("Index", "Classes", FormMethod.Get,
                    new { role = "search", id = "AdvanceSearchFormCustomer" }))
                {
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group mb-lg-0">
                                <label for="advanceFullname">
                                    <span class="text-small">Fullname</span>
                                </label>
                                <input id="advanceFullname" value="@ViewBag.className" name="className" type="text" class="form-control form-control-sm" />
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="form-group mb-lg-0">
                                <label for="datefilter">
                                    <span class="text-small">Date filter</span>
                                </label>
                                <input type="text" name="datefilter" id="datefilter" value="" class="form-control form-control-sm" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 mt-3 text-right">
                            <input type="submit" class="btn btn-primary btn-sm" value="Search" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body table-responsive">
                <h4 class="card-title">Class</h4>
                <p class="card-description d-sm-flex">
                    <span class="text-muted text-small my-auto">Click class name to see detail</span>
                    <br class="d-sm-none" />

                    <a class="btn btn-sm btn-primary ml-auto mr-2 mt-2 mt-sm-0" href="@Url.Action("Create", "Classes")">
                        Create New <span class="mdi mdi-plus-circle"></span>
                    </a>
                </p>
                <table class="table" id="update-customer">
                    <thead class="text-primary">
                        <tr>
                            <th>
                                #
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Name)
                            </th>
                            <th class="d-none d-sm-table-cell">
                                @Html.DisplayNameFor(model => model.CreatedAt)
                            </th>
                            <th class="text-center d-none d-lg-table-cell">
                                Edit
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {

                            <tr>
                                <td>
                                    <b class="text-small">@Html.DisplayFor(modelItem => item.Id)</b>
                                </td>

                                <td>
                                    <a class="badge" href="@Url.Action("Details", "Classes", new {id = item.Id})">
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </a>
                                </td>
                                <td class="d-none d-sm-table-cell text-info">
                                    @Html.DisplayFor(modelItem => item.CreatedAt)
                                </td>
                                <td class="text-center d-none d-lg-table-cell">
                                    <a class="badge badge-warning" href="@Url.Action("Edit", "Students", new {id = item.Id})">
                                        <span class="mdi mdi-pencil-box-outline"></span>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>
<br />
@if (totalPage > 1)
{
    <b>Page @currentPage of @totalPage</b>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a href="?page=1&limit=@(limit)@(currentPara)" aria-label="First">
                        <span aria-hidden="true">First</span>
                    </a>
                </li>
                <li class="page-item">
                    <a href="?page=@(currentPage-1)&limit=@(limit)@(currentPara)" aria-label="Previous">
                        <span aria-hidden="true">Previous</span>
                    </a>
                </li>
            }
            @if (currentPage > 2)
            {
                <li class="page-item"><a href="?page=@(currentPage-2)&limit=@(limit)@(currentPara)">@(currentPage - 2)</a></li>
            }
            @if (currentPage > 1)
            {
                <li class="page-item"><a href="?page=@(currentPage-1)&limit=@(limit)@(currentPara)">@(currentPage - 1)</a></li>
            }
            <li class="page-item"><a href="?page=@(currentPage)&limit=@(limit)@(currentPara)">@currentPage</a></li>
            @if (totalPage - currentPage > 0)
            {
                <li class="page-item"><a href="?page=@(currentPage+1)&limit=@(limit)@(currentPara)">@(currentPage + 1)</a></li>
            }
            @if (totalPage - currentPage > 1)
            {
                <li class="page-item"><a href="?page=@(currentPage+2)&limit=@(limit)@(currentPara)">@(currentPage + 2)</a></li>
            }
            @if (currentPage < totalPage)
            {
                <li class="page-item">
                    <a href="?page=@(currentPage+1)&limit=@(limit)@(currentPara)" aria-label="Next">
                        <span aria-hidden="true">Next</span>
                    </a>
                </li>
                <li class="page-item">
                    <a href="?page=@totalPage&limit=@(limit)@(currentPara)" aria-label="Next">
                        <span aria-hidden="true">Last</span>
                    </a>
                </li>
            }
        </ul>
    </nav>
}
@section scripts{
    <script type="text/javascript">
        $(function () {
            // init start time and end time;
            var startDate = new Date();
            startDate.setFullYear(startDate.getFullYear() - 1);
            var endDate = new Date();

            // check start and end parameter
            const startPara = getParameterFromUrl('start');
            if (startPara != null) {
                startDate = new Date(startPara);
            }
            const endPara = getParameterFromUrl('end');
            if (endPara != null) {
                endDate = new Date(endPara);
            }


            // ReSharper disable once PossiblyUnassignedProperty
            $('input[name="datefilter"]').daterangepicker({
                autoUpdateInput: true,
                startDate: startDate,
                endDate: endDate,
                locale: {
                    cancelLabel: 'Clear'
                }
            });
// ReSharper disable UnusedParameter

            $('input[name="datefilter"]').on('apply.daterangepicker', function (ev, picker) {
                const start = picker.startDate.format('YYYY-MM-DD');
                const end = picker.endDate.format('YYYY-MM-DD');
                window.location.href = window.location.href.split('?')[0] + '?start=' + start + '&end=' + end;
            });

            $('input[name="datefilter"]').on('cancel.daterangepicker', function (ev, picker) {
// ReSharper restore UnusedParameter
                $(this).val("");
            });

            function getParameterFromUrl(parameter) {
                const urlString = window.location.href;
                const url = new URL(urlString);
                return url.searchParams.get(parameter);
            }
        });
    </script>
}